// CRC

task compileCRC(type: JavaCompile) {
	String directory = 'Hamming'
	destinationDir = file('build/' + directory)
	source = fileTree(dir: './' + directory, include: '**/*.java')
	classpath = files('./' + directory)
}

task executeCRC(type: JavaExec, dependsOn: 'compileCRC') {
	String directory = 'CRC'
	standardInput = System.in
	classpath = files('build/' + directory)
	main = "CRC"
}

// Hamming

task compileHamming(type: JavaCompile) {
	String directory = 'Hamming'
	destinationDir = file('build/' + directory)
	source = fileTree(dir: './' + directory, include: '**/*.java')
	classpath = files('./' + directory)
}

task executeHamming(type: JavaExec, dependsOn: 'compileHamming') {
	String directory = 'Hamming'
	standardInput = System.in
	classpath = files('build/' + directory)
	main = "Hamming"
}

// Internet Checksum

task compileInternetChecksum(type: JavaCompile) {
	String directory = 'Internet Checksum'
	destinationDir = file('build/' + directory)
	source = fileTree(dir: './' + directory, include: '**/*.java')
	classpath = files('./' + directory)
}

task executeInternetChecksum(type: JavaExec, dependsOn: 'compileInternetChecksum') {
	String directory = 'Internet Checksum'
	standardInput = System.in
	classpath = files('build/' + directory)
	main = "InternetChecksum"
}

// Go Back N ARQ

task compileGoBackNARQ(type: JavaCompile) {
	String directory = 'Go Back N ARQ'
	destinationDir = file('build/' + directory)
	source = fileTree(dir: './' + directory, include: '**/*.java')
	classpath = files('./' + directory)
}

task executeGoBackNARQReceiver(type: JavaExec, dependsOn: 'compileGoBackNARQ') {
	String directory = 'Go Back N ARQ'
	standardInput = System.in
	classpath = files('build/' + directory)
	main = "GoBackNReceiver"
}

task executeGoBackNARQSender(type: JavaExec, dependsOn: 'compileGoBackNARQ') {
	String directory = 'Go Back N ARQ'
	standardInput = System.in
	classpath = files('build/' + directory)
	main = "GoBackNSender"
}

// Selective Repeat ARQ

task compileSelectiveRepeatARQ(type: JavaCompile) {
	String directory = 'Selective Repeat ARQ'
	destinationDir = file('build/' + directory)
	source = fileTree(dir: './' + directory, include: '**/*.java')
	classpath = files('./' + directory)
}

task executeSelectiveRepeatARQReceiver(type: JavaExec, dependsOn: 'compileSelectiveRepeatARQ') {
	String directory = 'Selective Repeat ARQ'
	standardInput = System.in
	classpath = files('build/' + directory)
	main = "SelectiveRepeatReceiver"
}

task executeSelectiveRepeatARQSender(type: JavaExec, dependsOn: 'compileSelectiveRepeatARQ') {
	String directory = 'Selective Repeat ARQ'
	standardInput = System.in
	classpath = files('build/' + directory)
	main = "SelectiveRepeatSender"
}